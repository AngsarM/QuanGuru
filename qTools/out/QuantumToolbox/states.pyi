from .customTypes import Matrix as Matrix, intList as intList, matrixList as matrixList, ndOrListInt as ndOrListInt, supInp as supInp
from numpy import ndarray as ndarray
from typing import Any, List, Optional

def basis(dimension: int, state: int, sparse: bool=...) -> Matrix: ...
def completeBasis(dimension: int, sparse: bool=...) -> matrixList: ...
def basisBra(dimension: int, state: int, sparse: bool=...) -> Matrix: ...
def zeros(dimension: int, sparse: bool=...) -> Matrix: ...
def superPos(dimension: int, excitations: supInp, sparse: bool=...) -> Matrix: ...
def densityMatrix(ket: Matrix) -> Matrix: ...
def completeBasisMat(dimension: Optional[int]=..., compKetBase: Optional[matrixList]=..., sparse: bool=...) -> matrixList: ...
def normalise(state: Matrix) -> Matrix: ...
def normaliseKet(ket: Matrix) -> Matrix: ...
def normaliseMat(denMat: Matrix) -> Matrix: ...
def compositeState(dimensions: intList, excitations: List[supInp], sparse: bool=...) -> Matrix: ...
def tensorProd(*args: Any): ...
def partialTrace(keep: ndOrListInt, dims: ndOrListInt, state: Matrix) -> ndarray: ...
def mat2Vec(densityMatrix: Matrix) -> Matrix: ...
def vec2mat(vec: Matrix) -> Matrix: ...
