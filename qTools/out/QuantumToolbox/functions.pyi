from .customTypes import Matrix as Matrix, floatList as floatList, matrixList as matrixList
from numpy import ndarray as ndarray
from typing import Any, List, Tuple

def expectation(operator: Matrix, state: Matrix) -> float: ...
def expectationMat(operator: Matrix, denMat: Matrix) -> float: ...
def expectationKet(operator: Matrix, ket: Matrix) -> float: ...
def expectationKetList(operator: Matrix, kets: matrixList) -> floatList: ...
def expectationMatList(operator: Matrix, denMats: matrixList) -> floatList: ...
def expectationColArr(operator: Matrix, states: ndarray) -> floatList: ...
def fidelity(state1: Matrix, state2: Matrix) -> float: ...
def fidelityKet(ket1: Matrix, ket2: Matrix) -> float: ...
def fidelityPureMat(denMat1: Matrix, denMat2: Matrix) -> float: ...
def fidelityKetList(ket1: Matrix, ketList: matrixList) -> floatList: ...
def fidelityKetLists(zippedStatesList: Any) -> floatList: ...
def entropy(densMat: Matrix, base2: bool=...) -> float: ...
def entropyKet(ket: Matrix, base2: bool=...) -> float: ...
def iprKet(basis: matrixList, ket: Matrix) -> float: ...
def iprKetList(basis: matrixList, kets: matrixList) -> floatList: ...
def iprKetNB(ket: Matrix) -> float: ...
def iprKetNBList(kets: matrixList) -> floatList: ...
def iprKetNBmat(kets: ndarray) -> floatList: ...
def iprPureDenMat(basis: matrixList, denMat: Matrix) -> float: ...
def sortedEigens(Ham: Matrix) -> Tuple[floatList, List[ndarray]]: ...
def eigVecStatKet(basis: matrixList, ket: Matrix) -> floatList: ...
def eigVecStatKetList(basis: matrixList, kets: matrixList) -> List[floatList]: ...
def eigVecStatKetNB(ket: Matrix) -> float: ...
