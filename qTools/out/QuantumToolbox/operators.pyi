from .customTypes import Matrix as Matrix
from typing import Any, Callable

def number(N: int, sparse: bool=...) -> Matrix: ...
def destroy(N: int, sparse: bool=...) -> Matrix: ...
def create(N: int, sparse: bool=...) -> Matrix: ...
def identity(N: int, sparse: bool=...) -> Matrix: ...
def sigmaz(N: int=..., sparse: bool=...) -> Matrix: ...
def sigmay(N: int=..., sparse: bool=...) -> Matrix: ...
def sigmax(N: int=..., sparse: bool=...) -> Matrix: ...
def sigmap(N: int=..., sparse: bool=...) -> Matrix: ...
def sigmam(N: int=..., sparse: bool=...) -> Matrix: ...
def Jz(j: float, sparse: bool=..., isDim: bool=...) -> Matrix: ...
def Jp(j: float, sparse: bool=..., isDim: bool=...) -> Matrix: ...
def Jm(j: float, sparse: bool=..., isDim: bool=...) -> Matrix: ...
def Jx(j: float, sparse: bool=..., isDim: bool=...) -> Matrix: ...
def Jy(j: Any, sparse: Any=..., isDim: Any=...) -> Matrix: ...
def Js(j: float, sparse: bool=..., isDim: bool=...) -> Matrix: ...
def operatorPow(op: Callable, dim: int, power: int, sparse: bool=...) -> Matrix: ...
def paritySUM(N: int, sparse: bool=...) -> Matrix: ...
def parityEXP(HamiltonianCavity: Matrix) -> Matrix: ...
def basis(dimension: int, state: int, sparse: bool=...) -> Matrix: ...
def displacement(alpha: complex, dim: int, sparse: bool=...) -> Matrix: ...
def squeeze(alpha: complex, dim: int, sparse: bool=...) -> Matrix: ...
def compositeOp(operator: Matrix, dimB: int, dimA: int) -> Matrix: ...
