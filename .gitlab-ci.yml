before_script:
    - python3 --version

stages:
    - Static Analysis
    - UnitTest:Core
    - UnitTest:Rest
    - Integration Test

mypy:
    stage: Static Analysis
    tags:
        - qsimulations
    allow_failure: false
    script:
    - python3 -m mypy

flake8:
    stage: Static Analysis
    tags:
        - qsimulations
    allow_failure: true
    script:
    - python3 -m flake8 qTools

pylint:
    stage: Static Analysis
    tags:
        - qsimulations
    allow_failure: false
    script:
        - python3 -m pylint --rcfile=.pylintrc --output-format=text qTools/*.py | tee pylint.txt || pylint-exit $?
        - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
        - echo "Pylint score was $score"
        - python3 -m anybadge --value=$score --file=pylint.svg pylint
    artifacts:
        paths:
            - pylint.svg
        when: always

core_test:
    stage: UnitTest:Core
    tags:
        - qsimulations
    allow_failure: false
    script:
    - python3 -m pytest --cov=qTools tests/QuantumToolboxCore/test_linearAlgebra.py
    - python3 -m pytest --cov=qTools --cov-append tests/QuantumToolboxCore/test_states.py
    - python3 -m pytest --cov=qTools --cov-append tests/QuantumToolboxCore/test_operators.py
    - python3 -m coverage report
    artifacts:
        paths:
            - .coverage

unit_test:
    stage: UnitTest:Rest
    tags:
        - qsimulations
    allow_failure: false
    dependencies:
        - "core_test"
    script:
    - python3 -m coverage report
    - python3 -m pytest --cov=qTools --cov-append --ignore=tests/QuantumToolboxCore -k 'not Core and not Integration'
    - python3 -m coverage report
    artifacts:
        paths:
            - .coverage

integration_test:
    stage: Integration Test
    tags:
        - qsimulations
    allow_failure: false
    dependencies:
        - "unit_test"
    script:
    - python3 -m coverage report
    - python3 -m pytest --cov=qTools --cov-append --ignore=tests/QuantumToolboxCore -k 'QuantumToolboxIntegration'
    - python3 -m coverage xml
    - python3 -m coverage report
    artifacts:
        reports:
            cobertura: coverage.xml
